## Create a new parent directory called "stats" where we will be doing all of our R work:
dir.create("stats/")
## Create a new directory called "rIntro" for today's exercises:
dir.create("stats/rIntro")
## Create new subdirectories "data", "scripts", & "output" for today's exercises:
dir.create("stats/rIntro/data")
dir.create("stats/rIntro/scripts")
dir.create("stats/rIntro/output")
## Set working directory to the rIntro/scripts parent directory, which will be our home base for today:
setwd("~/Desktop/psy1903/stats/rIntro/scripts")
install.packages("ggplot2")
library("ggplot2")
if (!require("pacman")) {install.packages("pacman"); require("pacman")}  # First install and load in pacman to R
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot")  # tidyverse contains many packages like dplyr, tidyr, stringr, and ggplot2, among others, and the additional packages should cover our data manipulations, plotting, and analyses
myVar <- 8  # This will create a variable called myVar and assign it a value of 8.
myVar + 2  # This will use the myVar variable and add 2, outputting 10
myVar <- myVar + 2  # This will overwrite the value of 8, and myVar will now be assigned 10 instead
sum(1, 2, 3)       # Adds numbers 1, 2, and 3, returns 6
mean(c(1, 2, 3))   # Finds the mean (average) of the numbers.
length(c(1, 2, 3)) # Finds the length of a vector, returns 3
mean(c(1, 2, 3, NA, 5)) # Will output NA because it doesn't know how to handle it
mean(c(1, 2, 3, NA, 5), na.rm = TRUE) # Will remove the NA and calculate the mean of the remaining numbers, outputting 2.75 (the correct answer)
mydata <- read.csv("../data/data.csv")
View(mydata)
mydata <- read.csv("~/Desktop/psy1903/stats/rIntro/data/data.csv", header = TRUE, stringsAsFactors = FALSE, na.strings = c("NA", "?"))
head(mydata)      # View the first few rows
str(mydata)       # See the structure of the data frame
mydata$moodGroup
mydata$moodGroup <- as.factor(mydata$moodGroup)
str(mydata)       # See the structure of the data frame
setwd("~/Desktop/psy1903/stats")
# Starting Out
# 1. Open a blank RScript to write all of the following code (don't save it quite yet).
setwd("~/Desktop/psy1903/stats")
dir.create("data_cleaning")
dir.create("data_cleaning/output")
dir.create("data_cleaning/scripts")
## 2. In your Console: Set your working directory to your psy1903/stats directory.
#
##The remaining steps should be completed in your RScript:
#
## 3. Using dir.create(): within your psy1903/stats/ directory create the following directories:
# data_cleaning (this will be the parent directory for our R exercises)
# data_cleaning/output (data visualizations and plots will go here)
# data_cleaning/scripts (this is where we'll save any scripts we create)
# data_cleaning/data (if we save any intermediary or final data files, they will go here)
dir.create("data_cleaning/data")
## 2. In your Console: Set your working directory to your psy1903/stats directory.
#
##The remaining steps should be completed in your RScript:
#
## 3. Using dir.create(): within your psy1903/stats/ directory create the following directories:
# data_cleaning (this will be the parent directory for our R exercises)
# data_cleaning/output (data visualizations and plots will go here)
# data_cleaning/scripts (this is where we'll save any scripts we create)
# data_cleaning/data (if we save any intermediary or final data files, they will go here)
dir.create("data_cleaning/data")
## 4. Set your working directory to be "your_path/psy1903/stats/data_cleaning/scripts/"
setwd("~/Desktop/psy1903/stats/data_cleaning/scripts/")
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot")
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot", "jsonlite")
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot", "jsonlite")
## 6. Using read.csv(): Read in one participant's .csv file as a data frame called "iat_data1" or "est_data1"
# You should keep your experiment's data files in psy1903/osfstorage-archive. To read them in, you will just need to provide the whole path to the .csv file (e.g., ~/Desktop/psy1903/osfstorage-archive/file_name.csv) or the relative path to the .csv file (e.g., ../../../osfstorage-archive/file_name.csv)
iatdata1 <- read.csv("~Desktop/psy1903/osfstorage-archive/iat-2024-11-05-22-01-17.csv")
## 6. Using read.csv(): Read in one participant's .csv file as a data frame called "iat_data1" or "est_data1"
# You should keep your experiment's data files in psy1903/osfstorage-archive. To read them in, you will just need to provide the whole path to the .csv file (e.g., ~/Desktop/psy1903/osfstorage-archive/file_name.csv) or the relative path to the .csv file (e.g., ../../../osfstorage-archive/file_name.csv)
iatdata1 <- read.csv("~/Desktop/psy1903/osfstorage-archive/iat-2024-11-05-22-01-17.csv")
## 7. Examine your data frame using str() and summary(). Copy and paste the output of str() below (summary() is too long).
str(iatdata1)
summary(iatdata1)
View(iatdata1)
#   EST:
#   Rows where the block is not a practice block (will require a series of or | conditionals in the row_index, or a not-equals-to conditional in the row_index)
#   Columns that are relevant to the EST: "trial_index", "rt", "response", "block", "word", "valence", "color", "correct"
#
iatdata2 <- iatdata1[iatdata1$expectedCategoryAsDisplayed == "treatment or stigmatizing" |
iatdata1$expectedCategoryAsDisplayed == "disorders or humanizing" |
iatdata1$expectedCategoryAsDisplayed == "treatment or humanizing" |
iatdata1$expectedCategoryAsDisplayed == "disorders or stigmatizing",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
View(iatdata2)
#   2. Using the str() and summary() functions, check the structure of your subsetted data files.
str(iatdata2)
#If your reaction time rt column is not numeric/integer, convert it to numeric with: iat_data2$rt <- round(as.numeric(iat_data2$rt), 0)
#
#If any of the following columns are not factors, convert them to factors with as.factor()
#
# IAT: expectedCategory, expectedCategoryAsDisplayed, leftCategory, rightCategory
# EST: block, valence, color
# Hint: You can do this a few different ways:
# You can make each column into a factor/integer one at a time based on the code from the notes.
# You can create a list of the column names (will need the assign operator <- and the concatenate c() function) and then create a for loop to iterate over each column name and convert it to a factor. For this to work, you must put the column name variable that you are iterating over in the column_index: iat_data2[, col_name] Using the dollar sign operator will not work because it cannot handle a dynamic variable (iat_data2$col_name will only look for a column named "col_name" directly even if you have already defined col_name <- "whichPrime")
iatdata2$correct <- as.logical(iatdata2$correct)
#   2. Using the str() and summary() functions, check the structure of your subsetted data files.
str(iatdata2)
iatdata2$expectedCategory <- as.factor(iatdata2$expectedCategory)
iatdata2$expectedCategoryAsDisplayed <- as.factor(iatdata2$expectedCategoryAsDisplayed)
iatdata2$leftCategory <- as.factor(iatdata2$leftCategory)
iatdata2$rightCategory <- as.factor(iatdata2$rightCategory)
#  3. Recheck the str() and summary() of your data frame. Paste the output of str() as your answer for this question.
str(iatdata2)
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- iatdata2[iatdata2$rt > 300 & iatdata2$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
calculate_IAT_dscore <- function() {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- iatdata2[iatdata2$rt > 300 & iatdata2$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- iatdata2[iatdata2$rt > 300 & iatdata2$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only*
# contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
files_list
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT Version
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
View(dScores)
## Rename the default column names to something meaningful
## IAT Version
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
## Now fill in the remaining code following the commented instructions:
file <- files_list[1]
## Now fill in the remaining code following the commented instructions:
file <- files_list[[1]]
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
View(tmp)
## Step 3: Assign participant_ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
participant_ID
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"]
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"] <- participant_ID
## Step 5: Using similar logic, isolate the d_score column for the current row number (i) and assign it to be the current d-score by using our calculate_IAT_dscore on the tmp data file
dScores[i, "d_score"] <- calculate_IAT_dscore()
## Step 6: Remove the temporary data file tmp
rm(tmp)
## Now fill in the remaining code following the commented instructions:
file <- files_list[[1]]
## Step 1: Initiate a for loop that iterates across each file in files_list
for (file in files_list) {
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
## Step 3: Assign participant_ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"] <- participant_ID
## Step 5: Using similar logic, isolate the d_score column for the current row number (i) and assign it to be the current d-score by using our calculate_IAT_dscore on the tmp data file
dScores[i, "d_score"] <- calculate_IAT_dscore()
## Step 6: Remove the temporary data file tmp
rm(tmp)
## Step 7: Increase our row number variable i by one for the next iteration
i <- i + 1
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- iatdata2[iatdata2$rt > 300 & iatdata2$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
iatdata2 <- iatdata1[iatdata1$expectedCategoryAsDisplayed == "treatment or stigmatizing" |
iatdata1$expectedCategoryAsDisplayed == "disorders or humanizing" |
iatdata1$expectedCategoryAsDisplayed == "treatment or humanizing" |
iatdata1$expectedCategoryAsDisplayed == "disorders or stigmatizing",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data()$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore()
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data()$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only*
# contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT Version
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT Version
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
for (file in files_list) {
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
## Step 3: Assign participant_ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"] <- participant_ID
## Step 5: Using similar logic, isolate the d_score column for the current row number (i) and assign it to be the current d-score by using our calculate_IAT_dscore on the tmp data file
dScores[i, "d_score"] <- calculate_IAT_dscore(tmp)
## Step 6: Remove the temporary data file tmp
rm(tmp)
## Step 7: Increase our row number variable i by one for the next iteration
i <- i + 1
}
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data()$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
## IAT
## Step 1: Specify your function with one argument, data
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
calculate_IAT_dscore <- function(my_data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- my_data[my_data$rt > 300 & my_data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(my_data)
calculate_IAT_dscore <- function(my_data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- my_data[my_data$rt > 300 & my_data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(my_data)
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Test out your function and see if you get a d-score
calculate_IAT_dscore(data)
calculate_IAT_dscore <- function(data) {
## Step 2: Select only trials with rt > 300 ms and < 5000 ms (subset full data frame into new data frame called tmp)
tmp <- data[data$rt > 300 & data$rt < 5000,]
## Step 3: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or humanizing" | tmp$expectedCategoryAsDisplayed == "disorders or stigmatizing",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "treatment or stigmatizing" | tmp$expectedCategoryAsDisplayed == "disorders or humanizing",]
## Step 4: Calculate mean for congruent and mean for incongruent trials (mean_congruent, mean_incongruent)
mean_congruent <- mean(congruent_trials$rt, na.rm = TRUE)
mean_incongruent <- mean(incongruent_trials$rt, na.rm = TRUE)
## Step 5: Calculate standard deviation for all trials (pooled_sd)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
## Step 6: Calculate D-score
d_score <- (mean_congruent - mean_incongruent) / pooled_sd
## Step 7: Delete tmp file
rm(tmp)
## Step 8: Return D-score
return(d_score)
}
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only*
# contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT Version
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT Version
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Now fill in the remaining code following the commented instructions:
# file <- files_list[[1]] # for testing purposes
## Step 1: Initiate a for loop that iterates across each file in files_list
for (file in files_list) {
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
## Step 3: Assign participant_ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"] <- participant_ID
## Step 5: Using similar logic, isolate the d_score column for the current row number (i) and assign it to be the current d-score by using our calculate_IAT_dscore on the tmp data file
dScores[i, "d_score"] <- calculate_IAT_dscore(tmp)
## Step 6: Remove the temporary data file tmp
rm(tmp)
## Step 7: Increase our row number variable i by one for the next iteration
i <- i + 1
}
for (file in files_list) {
## Step 2: Use read.csv to read in your file as a temporary data frame called tmp
tmp <- read.csv(file)
## Step 3: Assign participant_ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
## Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i, "participant_ID"] <- participant_ID
## Step 5: Using similar logic, isolate the d_score column for the current row number (i) and assign it to be the current d-score by using our calculate_IAT_dscore on the tmp data file
dScores[i, "d_score"] <- calculate_IAT_dscore(tmp)
## Step 6: Remove the temporary data file tmp
rm(tmp)
## Step 7: Increase our row number variable i by one for the next iteration
i <- i + 1
}
## Outside of the for loop, save the new dScores data frame using write.csv() into your data_cleaning/data subdirectory:
write.csv(dScores,"~/Desktop/psy1903/stats/data_cleaning/data/participant_dScores.csv", row.names = FALSE)
